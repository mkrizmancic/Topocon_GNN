program: gnn_fiedler_approx/algebraic_connectivity_script.py
name: selected_advanced_features
method: grid  # Bayesian works for small number of continuous parameters.
metric:
  goal: minimize
  name: val_loss
parameters:
  architecture:
    values: [GraphSAGE]
  hidden_channels:
    values: [32]
  gnn_layers:
    values: [5]
  mlp_layers:
    value: 2
  dropout:
    value: 0.0
  activation:
    values: [tanh]
  pool:
    values: [softmax]
  optimizer:
    value: adam
  learning_rate:
    values: [0.001, 0.005]
  epochs:
    value: 2000
  jk:
    values: [cat]
  selected_features:
    values:
      - [degree, degree_centrality, betweenness_centrality]
      - [degree, degree_centrality, betweenness_centrality, K_cycle_count_matrix]
      - [degree, degree_centrality, betweenness_centrality, A_matrix_row]
      - [degree, degree_centrality, betweenness_centrality, random_walk_pe]
      - [degree, degree_centrality]
      - [degree, degree_centrality, K_cycle_count_matrix]
      - [degree, degree_centrality, A_matrix_row]
      - [degree, degree_centrality, random_walk_pe]
      - [degree, degree_centrality, core_number, triangles, clustering, close_centrality]
      - [degree, degree_centrality, core_number, triangles, clustering, close_centrality, K_cycle_count_matrix]
      - [degree, degree_centrality, core_number, triangles, clustering, close_centrality, A_matrix_row]
      - [degree, degree_centrality, core_number, triangles, clustering, close_centrality, random_walk_pe]
command:
  - ${env}
  - ${interpreter}
  - ${program}
  - "--eval-type"
  - "basic"
  - "--eval-target"
  - "best"


